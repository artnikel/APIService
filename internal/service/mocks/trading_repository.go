// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/artnikel/APIService/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TradingRepository is an autogenerated mock type for the TradingRepository type
type TradingRepository struct {
	mock.Mock
}

// ClosePositionManually provides a mock function with given fields: ctx, dealid, profileid
func (_m *TradingRepository) ClosePositionManually(ctx context.Context, dealid uuid.UUID, profileid uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, dealid, profileid)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) float64); ok {
		r0 = rf(ctx, dealid, profileid)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, dealid, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePosition provides a mock function with given fields: ctx, deal
func (_m *TradingRepository) CreatePosition(ctx context.Context, deal *model.Deal) error {
	ret := _m.Called(ctx, deal)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Deal) error); ok {
		r0 = rf(ctx, deal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPrices provides a mock function with given fields: ctx
func (_m *TradingRepository) GetPrices(ctx context.Context) ([]model.Share, error) {
	ret := _m.Called(ctx)

	var r0 []model.Share
	if rf, ok := ret.Get(0).(func(context.Context) []model.Share); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Share)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnclosedPositions provides a mock function with given fields: ctx, profileid
func (_m *TradingRepository) GetUnclosedPositions(ctx context.Context, profileid uuid.UUID) ([]*model.Deal, error) {
	ret := _m.Called(ctx, profileid)

	var r0 []*model.Deal
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*model.Deal); ok {
		r0 = rf(ctx, profileid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTradingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTradingRepository creates a new instance of TradingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTradingRepository(t mockConstructorTestingTNewTradingRepository) *TradingRepository {
	mock := &TradingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
