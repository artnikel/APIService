// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/artnikel/APIService/internal/model"

	uuid "github.com/google/uuid"
)

// BalanceService is an autogenerated mock type for the BalanceService type
type BalanceService struct {
	mock.Mock
}

// BalanceOperation provides a mock function with given fields: ctx, balance
func (_m *BalanceService) BalanceOperation(ctx context.Context, balance *model.Balance) (float64, error) {
	ret := _m.Called(ctx, balance)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, *model.Balance) float64); ok {
		r0 = rf(ctx, balance)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Balance) error); ok {
		r1 = rf(ctx, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: ctx, profileid
func (_m *BalanceService) GetBalance(ctx context.Context, profileid uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, profileid)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, profileid)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, profileid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBalanceService interface {
	mock.TestingT
	Cleanup(func())
}

// NewBalanceService creates a new instance of BalanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBalanceService(t mockConstructorTestingTNewBalanceService) *BalanceService {
	mock := &BalanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
